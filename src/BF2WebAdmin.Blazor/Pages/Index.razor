@page "/"
@using BF2WebAdmin.Shared.Communication.DTOs
@using Microsoft.AspNetCore.SignalR.Client
@using System.Collections.Concurrent
@using BF2WebAdmin.Shared
@using BF2WebAdmin.Shared.Communication.Events
@implements IAsyncDisposable

<PageTitle>BF2 Web Admin</PageTitle>

<div class="d-flex justify-space-between flex-grow-1">
    <div>
        <MudText Typo="Typo.h3" Class="mb-8">Servers</MudText>
    </div>
    <div>
        <MudFab Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" Size="Size.Large" Href="/server/add"/>
    </div>
</div>

@foreach (var group in _servers.Values.GroupBy(s => s.ServerGroup).OrderBy(g => g.Key))
{
    <MudPaper Class="py-6 px-8 mb-8" Outlined="true" Style="background: rgba(50, 51, 61, 0)">
        <MudLink Href="@($"/servergroup/{group.Key}")" Underline="Underline.None">
            <MudText Typo="Typo.h5" Class="mb-4">@group.Key</MudText>
        </MudLink>

        <MudGrid>
            @foreach (var server in group.OrderBy(s => s.Name))
            {
                <MudItem xs="4">
                    <MudLink Href="@("/server/" + AdminService.UrlEncodeServerId(server.Id))" Underline="Underline.None">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6" Class="py-0">
                                        <MudIcon Icon="@(server.SocketState == SocketState.Connected ? Icons.Material.Filled.Circle : Icons.Material.Filled.StopCircle)"
                                                 Color="@(server.SocketState == SocketState.Connected ? Color.Success : Color.Error)" Size="Size.Small"/>
                                        @server.Name
                                    </MudText>
                                    <MudText Typo="Typo.caption" Style="color: rgba(255, 255, 255, 0.4)">
                                        @server.IpAddress:@server.GamePort
                                    </MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudLink Href="@($"/server/{AdminService.UrlEncodeServerId(server.Id)}/edit")">
                                        <MudIcon Icon="@Icons.Material.Filled.Settings" Color="@Color.Default"/>
                                    </MudLink>
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudChip Size="Size.Small">@server.GameState</MudChip>
                                <MudChip Size="Size.Small">@server.Map</MudChip>
                                <MudChip Size="Size.Small">@server.Players / @server.MaxPlayers players</MudChip>
                            </MudCardContent>
                        </MudCard>
                    </MudLink>
                </MudItem>
            }
        </MudGrid>
    </MudPaper>
}

@code {
    private List<IDisposable> _listeners = new();
    private ConcurrentDictionary<string, ServerDto> _servers = new();

    protected override async Task OnInitializedAsync()
    {
        _listeners = new List<IDisposable>
        {
            _adminService.HubConnection.On<ServerUpdateEvent>(nameof(ServerUpdateEvent), e =>
            {
                _servers.AddOrUpdate(e.Id, id => e, (id, existingServer) => e);
                StateHasChanged();
            }),
            _adminService.HubConnection.On<ServerRemoveEvent>(nameof(ServerRemoveEvent), e =>
            {
                _servers.TryRemove(e.ServerId, out _);
                StateHasChanged();
            }),
        };

        await _adminService.ConnectAsync();
    }

    public ValueTask DisposeAsync()
    {
        foreach (var listener in _listeners)
        {
            listener.Dispose();
        }

        return ValueTask.CompletedTask;
    }

}